<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS3动画</title>
    <url>/CSS3%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="CSS3动画"><a href="#CSS3动画" class="headerlink" title="CSS3动画"></a>CSS3动画</h2><h5 id="创建动画"><a href="#创建动画" class="headerlink" title="创建动画"></a>创建动画</h5><p>myfirst为动画名，动画为时间进行到20%的时候调用的元素高为100px，50%的时候为 900px，100%为1000px，动画运行结束</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> myfirst&#123;</span><br><span class="line">0% &#123;<span class="attribute">height</span>: <span class="number">0px</span>;&#125;   <span class="comment">/*from等于0%*/</span></span><br><span class="line">20%&#123;<span class="attribute">height</span>: <span class="number">100px</span>;&#125;</span><br><span class="line">50%&#123;<span class="attribute">height</span>: <span class="number">900px</span>;&#125;</span><br><span class="line">100% &#123;<span class="attribute">height</span>: <span class="number">1000px</span>;&#125;  <span class="comment">/*to等于0%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="调用动画"><a href="#调用动画" class="headerlink" title="调用动画"></a>调用动画</h5><p>animation: 动画名 动画运行时间</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>: myfirst <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6语法基础</title>
    <url>/ECMAScript6%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="ECMAScript-6-语法基础"><a href="#ECMAScript-6-语法基础" class="headerlink" title="ECMAScript 6 语法基础"></a>ECMAScript 6 语法基础</h1><h2 id="1-let-关键词"><a href="#1-let-关键词" class="headerlink" title="1 let 关键词"></a>1 let 关键词</h2><ul>
<li>let用来声明变量</li>
<li>没有变量提升</li>
<li>有块级作用域</li>
<li>不能重复声明变量</li>
</ul>
<p>案例1: 变量提升</p>
<p><img src="/ECMAScript6语法基础/1545982428706.png" alt="1545982428706"></p>
<p>案例2: 块级作用域</p>
<p>   一对大括号就是一个程序块，在大括号之中声明的变量，出了大括号就不能用了</p>
<p><img src="/ECMAScript6语法基础/1545982557029.png" alt="1545982557029"></p>
<p><img src="/ECMAScript6语法基础/1545982571906.png" alt="1545982571906"></p>
<p><img src="/ECMAScript6语法基础/1545982714934.png" alt="1545982714934"></p>
<p>案例3: 不能重复声明</p>
<p><img src="/ECMAScript6语法基础/1545982837232.png" alt="1545982837232"></p>
<h2 id="2-const-常量"><a href="#2-const-常量" class="headerlink" title="2 const 常量"></a>2 const 常量</h2><p>  一旦赋值就不能改变的量就是常量， 常量也有块级作用域，常量也不能提升</p>
<p>  特点：</p>
<ul>
<li>没有常量提升</li>
<li>也有块级作用域</li>
<li>必须要初始化值</li>
<li>能用常量就是用常量，因为常量速度更快</li>
</ul>
<p><img src="/ECMAScript6语法基础/1545983084245.png" alt="1545983084245"></p>
<p><img src="/ECMAScript6语法基础/1545983146384.png" alt="1545983146384"></p>
<p><img src="/ECMAScript6语法基础/1545983210927.png" alt="1545983210927"></p>
<p><img src="/ECMAScript6语法基础/1545983276320.png" alt="1545983276320"></p>
<h2 id="3-var-、let-和-const的区别"><a href="#3-var-、let-和-const的区别" class="headerlink" title="3 var 、let 和 const的区别"></a>3 var 、let 和 const的区别</h2><ul>
<li>var和let都能声明变量，但是let更严谨一些，在es6之后都推荐使用let来声明变量。</li>
<li>let的特殊点： 不能提升变量(保证程序的逻辑通畅)、 有块级作用域(避免变量交叉污染)、不能重复声明保证变量的唯一性</li>
<li>const用来声明常量，常量是不能改变的量，常量也有块级作用域，不能提升，初始化常量时必须赋值</li>
<li>能用const就用const</li>
</ul>
<h2 id="4-解构赋值"><a href="#4-解构赋值" class="headerlink" title="4 解构赋值"></a>4 解构赋值</h2><p>   解构赋值就是将对象或者数组中的数据拆解出来分别赋值给某几个变量/常量</p>
<p> 案例1： 正常解构方式</p>
<p> 后面是对象，前就是对象；后面是数组，前面就是数组；不能交叉</p>
<p><img src="/ECMAScript6语法基础/1545983855122.png" alt="1545983855122"></p>
<p> 案例2： 别名</p>
<p><img src="/ECMAScript6语法基础/1545984025137.png" alt="1545984025137"></p>
<p> 案例3： 变量数量与对象单元不对等， 按key正常赋值，如果没有则赋值为 undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名少，则正常赋值</span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545984259549.png" alt="1545984259549"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名多，则赋值为undefined</span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545984309956.png" alt="1545984309956"></p>
<p>  案例4：数组中不对等，使用  …  方式</p>
<p>  如果使用  …   则多余出来的值会以数组形式保存在最后一个变量中</p>
<p><img src="/ECMAScript6语法基础/1545984482921.png" alt="1545984482921"></p>
<h2 id="5-字符串扩展"><a href="#5-字符串扩展" class="headerlink" title="5 字符串扩展"></a>5 字符串扩展</h2><p>  1) 模板字符串</p>
<ul>
<li>使用反引号来声明的字符串就是模板字符串 （Esc下面的键）</li>
<li>使用反引号定义字符串时，字符串中可以忽略单双引号的嵌套问题</li>
<li>在模板字符串中要输出变量可以使用 ${变量名} 的形式</li>
</ul>
<p>不需要关心单双引号嵌套的问题，也不用担心换行问题</p>
<p><img src="/ECMAScript6语法基础/1545984859009.png" alt="1545984859009"></p>
<p><img src="/ECMAScript6语法基础/1545985094770.png" alt="1545985094770"></p>
<p>   2) includes() </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">includes() 判断一个字符串是否包含另一个字符串中</span><br><span class="line">str.includes(char): 判断char是否在str中，存在则返回true，不存在则返回false</span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545986028312.png" alt="1545986028312"></p>
<p>   3) startsWith()  和  endsWith()</p>
<ul>
<li>startsWith(): 判断一个字符串是否以另一个字符串开始</li>
<li>endsWith(): 判断一个字符串是否以另一个字符串结束</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.startsWith(char): 判断str是否以char开头，是则返回<span class="literal">true</span>，否返回<span class="literal">false</span></span><br><span class="line">str.endsWith(char): 判断str是否以char结尾，是则返回<span class="literal">true</span>，否返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545986173133.png" alt="1545986173133"></p>
<p>   4) padStart()  和  padEnd()</p>
<ul>
<li>padStart(): 设置字符串总长度，如果长度不够则使用某个字符填充到字符串的开头</li>
<li>padEnd(): 设置字符串总长度，如果长度不够则使用某个字符填充到字符串的结尾</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.padStart(<span class="number">8</span>, <span class="string">'-'</span>): 在str字符串前，使用<span class="string">'-'</span>将str补充为<span class="number">8</span>位长度</span><br><span class="line">str.padEnd(<span class="number">10</span>, <span class="string">'md'</span>): 在str字符串结尾，使用<span class="string">'md'</span>将str补充为<span class="number">10</span>位长度</span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545986365228.png" alt="1545986365228"></p>
<h2 id="6-数组扩展"><a href="#6-数组扩展" class="headerlink" title="6 数组扩展"></a>6 数组扩展</h2><p> 1) includes：判断一个数组中是否包含另一个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.inclcudes(val): 判断arr数组中是否包含val值，如果包含返回<span class="literal">true</span>，否则返回<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545986750539.png" alt="1545986750539"></p>
<p> 2) find： 返回满条件的第一个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'aaa'</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="string">'bbb'</span>, <span class="number">200</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.find(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">50</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);   <span class="comment">//100</span></span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545986975455.png" alt="1545986975455"></p>
<p> 3) findIndex： 返回满足条件的第一个值的索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'aaa'</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="string">'bbb'</span>, <span class="number">200</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">50</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545987058675.png" alt="1545987058675"></p>
<h2 id="7-函数扩展"><a href="#7-函数扩展" class="headerlink" title="7 函数扩展"></a>7 函数扩展</h2><p>   1) 形参默认值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">声明函数时给形参设置默认值。在函数调用时，如果没有传入实参则使用形参默认值；如果设置了实参则使用实参的值。</span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545987257533.png" alt="1545987257533"></p>
<p>   2) 解构赋值和形参默认值配合使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义函数时，形参设置成对象形式； 函数调用时，实参的key必须和参数名一致</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//定义函数时参数使用解构赋值方式</span><br><span class="line">function add (&#123;x, y = 10&#125;) &#123;</span><br><span class="line">    console.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//传入实参是对象形式</span><br><span class="line">//key必须和定义函数时指定的变量名一致</span><br><span class="line">add(&#123;x:10&#125;);</span><br><span class="line">add(&#123;x:10, y:15&#125;);</span><br></pre></td></tr></table></figure>

<p>   3) rest参数（可变参数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数调用时，实参会以数组形式保存在args变量中</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...args 就叫做rest参数</span></span><br><span class="line"><span class="comment">// 作用是接收可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(<span class="number">111</span>, <span class="string">'abc'</span>, <span class="number">3.1415</span>, <span class="string">'haha'</span>, <span class="string">'hehe'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用时，所有参数会以数组形式保存在 args 中</span></span><br></pre></td></tr></table></figure>

<p><img src="/ECMAScript6语法基础/1545987589172.png" alt="1545987589172"></p>
<p>​    </p>
<p>$.get(url, callback)</p>
<h2 id="8-箭头函数"><a href="#8-箭头函数" class="headerlink" title="8 箭头函数"></a>8 箭头函数</h2><p> 1) 箭头函数的定义方式</p>
<ul>
<li>箭头函数的用法和普通函数用法几乎一致</li>
<li>去掉 function 关键词</li>
<li>() 和 {}  之间增加 =&gt;</li>
</ul>
<p><img src="/ECMAScript6语法基础/1545988005654.png" alt="1545988005654"></p>
<p><img src="/ECMAScript6语法基础/1545988107673.png" alt="1545988107673"></p>
<p> 2) 箭头函数的特殊点</p>
<ul>
<li>箭头函数不能作为构造函数</li>
<li>箭头函数没有arguments，要使用可变参数可以使用 rest 方式</li>
<li>箭头函数没有this对象，在箭头函数中的this指的函数外层的对象</li>
<li>如果函数体只有一句并且设置了返回值，则不需要使用大括号，不需要return</li>
<li>如果函数中只有一个参数，则不需要写小括号</li>
</ul>
<p>1) 不能作为构造函数</p>
<p><img src="/ECMAScript6语法基础/1545988250495.png" alt="1545988250495"></p>
<p><img src="/ECMAScript6语法基础/1545988266428.png" alt="1545988266428"></p>
<p>2) 箭头函数没有arguments，要使用可变参数可以使用 rest 方式</p>
<p><img src="/ECMAScript6语法基础/1545988440741.png" alt="1545988440741"></p>
<p>3) 箭头函数没有this对象，在箭头函数中的this指的函数外层的对象</p>
<p><img src="/ECMAScript6语法基础/1545988754733.png" alt="1545988754733"></p>
<p>4) 如果函数体只有一句并且设置了返回值，则不需要使用大括号，不需要return</p>
<p><img src="/ECMAScript6语法基础/1545988977474.png" alt="1545988977474"></p>
<p>5) 如果函数中只有一个参数，则不需要写小括号</p>
<p><img src="/ECMAScript6语法基础/1545988968826.png" alt="1545988968826"></p>
<h2 id="9-定义对象的简洁方式"><a href="#9-定义对象的简洁方式" class="headerlink" title="9 定义对象的简洁方式"></a>9 定义对象的简洁方式</h2><p>   在声明对象时，值的变量名和属性名相同时, 可以只写属性而不写值</p>
<p><img src="/ECMAScript6语法基础/1545989833856.png" alt="1545989833856"></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>H5新特性</title>
    <url>/H5%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="H5新特性"><a href="#H5新特性" class="headerlink" title="H5新特性"></a>H5新特性</h2><p>在前端领域H5是一个技术集合（技术栈），而不是一个单纯的技术点，所有不能理解为是一个html规范</p>
<p>H5的新特性需要从梳理，一下为H5新特性（不止这些）</p>
<ul>
<li><p>html</p>
<ul>
<li>语义化标签</li>
<li>表单新特性</li>
</ul>
</li>
<li><p>css</p>
<ul>
<li>新增选择器</li>
<li>属性的增强</li>
<li>过渡</li>
<li>转换</li>
<li>动画</li>
<li>媒体查询</li>
</ul>
</li>
<li><p>javascript</p>
<ul>
<li>新增应用API</li>
<li>canvas绘图</li>
<li>ES6</li>
</ul>
</li>
</ul>
<h5 id="1-1语义化标签"><a href="#1-1语义化标签" class="headerlink" title="1.1语义化标签"></a>1.1语义化标签</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--语义化标签：和div是一样的没有任何特殊的作用，仅仅是语义而已--&gt;</span><br><span class="line">&lt;!--作用：让结构更清晰，利于搜索引擎优化, SEO --&gt;</span><br><span class="line">&lt;!--头部--&gt;</span><br><span class="line">&lt;header&gt;&lt;/header&gt;</span><br><span class="line">&lt;!--导航--&gt;</span><br><span class="line">&lt;nav&gt;&lt;/nav&gt;</span><br><span class="line">&lt;!--主体--&gt;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">    &lt;!--主体 侧边栏--&gt;</span><br><span class="line">    &lt;aside&gt;&lt;/aside&gt;</span><br><span class="line">    &lt;!--主体 内容--&gt;</span><br><span class="line">    &lt;article&gt;&lt;/article&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;!--底部--&gt;</span><br><span class="line">&lt;footer&gt;&lt;/footer&gt;</span><br></pre></td></tr></table></figure>

<h5 id="1-2表单新特性"><a href="#1-2表单新特性" class="headerlink" title="1.2表单新特性"></a>1.2表单新特性</h5><p>input的type新增了text、checkbox、password、button、file、range等很多类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lunch"</span> <span class="attr">list</span>=<span class="string">"lunchList"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>新增了选择框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"lunchList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>京酱肉丝<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>锅包肉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新增了属性</p>
<ol>
<li><p>autocomplete 控制 自动完成功能   off 关闭  on 开启  给form加整个表单不使用自动完成</p>
</li>
<li><p>required 必填</p>
</li>
<li><p>忽略表单H5检验方式 novalidate</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">novalidate</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-5新增动画"><a href="#1-5新增动画" class="headerlink" title="1.5新增动画"></a>1.5新增动画</h5><p><a href="http://chengjian123.com/H5新特性/">http://chengjian123.com/H5%E6%96%B0%E7%89%B9%E6%80%A7/</a></p>
<h5 id="3-1新增应用API"><a href="#3-1新增应用API" class="headerlink" title="3.1新增应用API"></a>3.1新增应用API</h5><p> webworker:多线程</p>
<p>webscoket：实时通讯协议</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Socket对象</span></span><br><span class="line"><span class="keyword">var</span> Socket = <span class="keyword">new</span> WebSocket(url, [protocol] );</span><br><span class="line"><span class="comment">//事件</span></span><br><span class="line">Socket.onopen()&#123;&#125; <span class="comment">//连接建立时触发</span></span><br><span class="line">Socket.onmessage()&#123;&#125; <span class="comment">//客户端接收服务端数据时触发</span></span><br><span class="line">Socket.onerror()&#123;&#125; <span class="comment">//通信发生错误时触发</span></span><br><span class="line">Socket.onclose()&#123;&#125; <span class="comment">//连接关闭时触发</span></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line">Socket.send() <span class="comment">//使用连接发送数据</span></span><br><span class="line">Socket.close() <span class="comment">//关闭连接</span></span><br></pre></td></tr></table></figure>

<p>draggable:拖拽属性</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue计算属性</title>
    <url>/Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul>
<li>计算属性:是Vue实例的一个选项 computed:{}</li>
<li>作用:在计算属性中去处理data里的数据  </li>
<li>使用场景:任何复杂逻辑，都应当使用<strong>计算属性</strong></li>
<li>本质: 计算属性的其实就是一个属性,用法和data中的属性一样,但计算属性的值是一个带有返回值的方法</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;p&gt;&#123;&#123;c=a+b&#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 现象: data中的属性c的值依赖于data中的另外两个属性a和b</span></span><br><span class="line"><span class="comment">问题:如果逻辑代码很简单,可以把表达式直接写在&#123;&#123;&#125;&#125;中</span></span><br><span class="line"><span class="comment">如果逻辑代码很复杂, 直接把表达式写在&#123;&#123;&#125;&#125;中不合适</span></span><br><span class="line"><span class="comment">此时, 就用到了计算属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 计算属性的用法和data中的属性用法一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;comC&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;comC&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;comC&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            a: 0,</span><br><span class="line">            b: 0,</span><br><span class="line">            c: 0</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">// 计算属性</span></span></span><br><span class="line">        /*</span><br><span class="line">             * 计算属性是Vue实例的一个选项</span><br><span class="line">             * 计算属性的值是一个对象</span><br><span class="line">             * 计算属性也是属性,只不过值是带有返回值的函数</span><br><span class="line">             * 当data中的属性一发生变化, 会自动调用计算属性的方法</span><br><span class="line">             */</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="actionscript">            comC: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="computed和methods"><a href="#computed和methods" class="headerlink" title="computed和methods"></a>computed和methods</h3><ul>
<li>computed:<ul>
<li>一旦data中的数据发生<strong>变化</strong>,就会触发计算属性的方法</li>
<li>会将data中属性的结果进行缓存,对比缓存中的结果是否发生变化</li>
</ul>
</li>
<li>methods: 一调用就会触发, 和数据的变化与否无关</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;comFn&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;comFn&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;comFn&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'abc'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            fn() &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 返回一个值</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            comFn() &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 计算属性，如果data中的数据变化，会重新执行，</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'计算属性'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue的常用指令</title>
    <url>/Vue%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a><a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener">Vue常用指令</a></h2><blockquote>
<p>扩展了html标签的功能、大部分的指令的值是js的表达式</p>
<p>取代DOM操作</p>
</blockquote>
<h3 id="v-text和v-html"><a href="#v-text和v-html" class="headerlink" title="v-text和v-html"></a><a href="https://vuefe.cn/v2/api/#v-text" target="_blank" rel="noopener">v-text</a>和<a href="https://vuefe.cn/v2/api/#v-html" target="_blank" rel="noopener">v-html</a></h3><blockquote>
<p>很像innerText和innerHTML</p>
</blockquote>
<ul>
<li>v-text:更新标签中的内容<ul>
<li>v-text和插值表达式的区别<ul>
<li>v-text  更新整个标签中的内容</li>
<li>插值表达式: 更新标签中局部的内容</li>
</ul>
</li>
</ul>
</li>
<li>v-html:更新标签中的内容/标签<ul>
<li>可以渲染内容中的HTML标签</li>
<li>注意:尽量避免使用，容易造成危险 (XSS跨站脚本攻击)</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- v-text指令的值会替换标签内容 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;str&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"str"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"str"</span>&gt;</span>我是p标签中的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"strhtml"</span>&gt;</span>我是p标签中的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"str"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- v-html指令的值(包括标签字符串)会替换掉标签的内容 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"strhtml"</span>&gt;</span>我是p标签中的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               str: <span class="string">'abc'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">               strhtml: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>content<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a><a href="https://vuefe.cn/v2/api/#v-if" target="_blank" rel="noopener">v-if</a>和<a href="https://vuefe.cn/v2/api/#v-show" target="_blank" rel="noopener">v-show</a></h3><p>作用:根据表达式的bool值进行判断是否渲染该元素</p>
<p><img src="/Vue的常用指令/1536134173441.png" alt="1536134173441"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 如果isShow的值是true ,就显示p标签 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span>我是p标签中的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>我是p标签中的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 如果标签显示与隐藏切换频繁, 就使用v-show </span></span><br><span class="line"><span class="comment">           v-show本质是通过修改标签的display值</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               isShow: <span class="literal">false</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>效果</code> </p>
<blockquote>
<p><code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。</p>
<p>因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；</p>
<p>如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。 </p>
</blockquote>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a><a href="https://vuefe.cn/v2/guide/events.html" target="_blank" rel="noopener">v-on</a></h3><ul>
<li><p>作用:使用 <code>v-on</code> 指令绑定 DOM 事件，并在事件被触发时执行一些 JavaScript 代码。</p>
</li>
<li><p>语法:  @事件名.修饰符 = “methods中的方法名”  </p>
</li>
<li><p>注意: $event  可以传形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- v-on.xx事件名='当触发xx事件时执行的语句' --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 执行一段js语句:可以使用data中的属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- v-on的简写方法 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 执行一个方法 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 执行一个方法、这种写法可以传形参 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"fn1(count)"</span>&gt;</span>执行fn1方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 执行一个方法、这种写法可以传形参,特殊的形参$event --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"fn2($event)"</span>&gt;</span>执行fn2方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 和v-for结合使用 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"fn3(index)"</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span>执行fn3方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- v-on修饰符 如 once: 只执行一次 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"fn4"</span>&gt;</span>只执行一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>上面的按钮被点击了 &#123;&#123; count &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line">               count: 0,</span><br><span class="line"><span class="actionscript">               items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line"><span class="actionscript">               add: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                   <span class="keyword">this</span>.count += <span class="number">1</span>;</span></span><br><span class="line">               &#125;,</span><br><span class="line"><span class="actionscript">               fn1: <span class="function"><span class="keyword">function</span><span class="params">(count)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log(count);</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log(<span class="string">'fn1方法被执行'</span>);</span></span><br><span class="line">               &#125;,</span><br><span class="line"><span class="actionscript">               fn2: <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log(<span class="string">'fn2方法被执行'</span>);</span></span><br><span class="line">               &#125;,</span><br><span class="line"><span class="actionscript">               fn3: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log(<span class="string">'fn3方法被执行'</span>);</span></span><br><span class="line">               &#125;,</span><br><span class="line"><span class="actionscript">               fn4: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="built_in">console</span>.log(<span class="string">'fn4方法被执行了'</span>);</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修饰符</p>
<ul>
<li><code>.once</code> - 只触发一次回调。</li>
<li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li>
</ul>
</li>
</ul>
<blockquote>
<p>简写: @事件名.修饰符 = ‘methods中的方法名’</p>
</blockquote>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><a href="https://cn.vuejs.org/v2/guide/list.html" target="_blank" rel="noopener">v-for</a></h3><p><img src="/Vue的常用指令/1536134987496.png" alt="1536134987496"></p>
<blockquote>
<p>根据一组数组或对象的选项列表进行渲染。</p>
<p><code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，</p>
<p><code>items</code> 是源数据数组 /对象</p>
<p>当要渲染相似的标签结构时用v-for</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-for作用:列表渲染,当遇到相似的标签结构时,就用v-for去渲染</span></span><br><span class="line"><span class="comment">				v-for="元素 in 容器(数组和对象)"</span></span><br><span class="line"><span class="comment">				v-for="数组中的元素 in data中的数组名"</span></span><br><span class="line"><span class="comment">				v-for="对象中的属性值 in data中的对象名"</span></span><br><span class="line"><span class="comment">			--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数组 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- (v,i) in 数组</span></span><br><span class="line"><span class="comment">				v:数组中的每个元素</span></span><br><span class="line"><span class="comment">				i:数组中元素的下标</span></span><br><span class="line"><span class="comment">			--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对象 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- (v,k,i)in 对象</span></span><br><span class="line"><span class="comment">				v:值</span></span><br><span class="line"><span class="comment">				k:键</span></span><br><span class="line"><span class="comment">				i:对象中每对key-value的索引 从0开始</span></span><br><span class="line"><span class="comment">				注意: v,k,i是参数名,见名知意即可!</span></span><br><span class="line"><span class="comment">			--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"value in per"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(value,key) in per"</span>&gt;</span>&#123;&#123;value&#125;&#125;----&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(value,key,i) in per"</span>&gt;</span>&#123;&#123;value&#125;&#125;----&#123;&#123;key&#125;&#125;--&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el: <span class="string">'#app'</span>,</span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="actionscript">                    list: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span></span><br><span class="line">                    per: &#123;</span><br><span class="line"><span class="actionscript">                        name: <span class="string">'老王'</span>,</span></span><br><span class="line">                        age: 38,</span><br><span class="line"><span class="actionscript">                        gender: <span class="string">'男'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 在使用v-for时,要把一个唯一值赋值给:key属性(通常是数组的index或者数据的id)</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- v-for </span></span><br><span class="line"><span class="comment">           key属性: 值通常是一个唯一的标识</span></span><br><span class="line"><span class="comment">           key是一个可选属性</span></span><br><span class="line"><span class="comment">           养成好习惯:建议在写v-for时 设置:key="唯一值"</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;item&#125;&#125;---&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               list: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods: &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a><a href="https://cn.vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="noopener">v-bind</a></h3><p><strong>作用:</strong> 可以绑定标签上的任何属性。</p>
<h4 id="绑定src和id属性"><a href="#绑定src和id属性" class="headerlink" title="绑定src和id属性"></a>绑定src和id属性</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- data中的属性值会替换为标签的属性值 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"src"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:id</span>=<span class="string">"idValue"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el: <span class="string">'#app'</span>,</span></span><br><span class="line">          data: &#123;</span><br><span class="line"><span class="actionscript">              src: <span class="string">'./logo.png'</span>,</span></span><br><span class="line"><span class="actionscript">              idValue: <span class="string">'b'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="绑定class类名"><a href="#绑定class类名" class="headerlink" title="绑定class类名"></a>绑定class类名</h4><p>对象语法和数组语法</p>
<h5 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h5><p>如果isActive为true，则返回的结果为 <code>&lt;div class=&quot;active&quot;&gt;&lt;/div&gt;</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">           <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active: isActive&#125;"</span>&gt;</span></span><br><span class="line">           hei</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeClassName"</span>&gt;</span>点击切换类名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">          el: <span class="string">'#app'</span>,</span><br><span class="line">          data: &#123;</span><br><span class="line">              isActive: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          methods: &#123;</span><br><span class="line">              changeClassName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">this</span>.isActive = !<span class="keyword">this</span>.isActive;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h5><p>渲染的结果 <code>&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, dangerClass]"</span>&gt;</span></span><br><span class="line">    hei</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">        	activeClass: <span class="string">'active'</span>,</span></span><br><span class="line"><span class="actionscript">            dangerClass: <span class="string">'text-danger'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><p>对象语法和数组语法</p>
<h5 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h5><p>渲染的结果<div style="color: red; font-size: 18px;"></div></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;color: redColor, fontSize: font18 + 'px'&#125;"</span>&gt;</span></span><br><span class="line">           文本内容</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               redColor: <span class="string">'red'</span>,</span></span><br><span class="line">               font18: 18</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[color, fontSize]"</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            color: &#123;</span><br><span class="line"><span class="actionscript">                color: <span class="string">'red'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            fontSize: &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">'font-size'</span>: <span class="string">'18px'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="简化语法"><a href="#简化语法" class="headerlink" title="简化语法"></a>简化语法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active: isActive&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以简化为 :，简化语法更常用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;active: isActive&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p><strong>作用:</strong> 表单元素的绑定</p>
<p>特点: <strong>双向数据绑定</strong></p>
<ul>
<li>数据发生变化可以更新到界面</li>
<li>通过界面可以更改数据</li>
<li><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> 特性的初始值而总是将 Vue 实例的数据作为数据来源。应该在 <code>data</code>选项中声明初始值。 </li>
</ul>
<h4 id="绑定文本框"><a href="#绑定文本框" class="headerlink" title="绑定文本框"></a>绑定文本框</h4><p><strong>效果:</strong>当文本框的值发生变化后，div中的内容也会发生变化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-model</span>=<span class="string">'message'</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- v-model其实是语法糖,它是下面这种写法的简写 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">'message'</span> <span class="attr">v-on:input</span>=<span class="string">'message = $event.target.value'</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               message: <span class="string">'message默认值'</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="绑定多行文本框"><a href="#绑定多行文本框" class="headerlink" title="绑定多行文本框"></a>绑定多行文本框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">          我是textarea内的插值表达式 无效 &#123;&#123;str&#125;&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               message: <span class="string">'message默认值'</span>,</span></span><br><span class="line"><span class="actionscript">               str: <span class="string">'str字符串'</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>多行文本框中使用插值表达式 无效</p>
<h4 id="绑定复选框"><a href="#绑定复选框" class="headerlink" title="绑定复选框"></a>绑定复选框</h4><ul>
<li><h5 id="绑定一个复选框"><a href="#绑定一个复选框" class="headerlink" title="绑定一个复选框"></a>绑定一个复选框</h5></li>
</ul>
<blockquote>
<p>checked是布尔类型的数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="绑定多个复选框"><a href="#绑定多个复选框" class="headerlink" title="绑定多个复选框"></a>绑定多个复选框</h5><p>此种方式需要input标签<strong>提供value属性</strong></p>
<p> v-model绑定的是<strong>数组-</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多个复选框  : 需要设置value属性值, v-model绑定的是数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"john"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"mike"</span> <span class="attr">value</span>=<span class="string">"Mike"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line">               checkedNames: []</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="绑定单选框"><a href="#绑定单选框" class="headerlink" title="绑定单选框"></a>绑定单选框</h5><blockquote>
<p>需要input提供value属性的值</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">&#123;&#123;sex&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">       el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            sex: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="绑定下拉框"><a href="#绑定下拉框" class="headerlink" title="绑定下拉框"></a>绑定下拉框</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 下拉框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span> 您选择的是: &#123;&#123;selected&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                selected: <span class="string">''</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p><strong>问题</strong>:在使用vue绑定数据的时候，渲染页面有时会出现变量闪烁，例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               message: <span class="string">'我是data中message的数据'</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>效果:</strong>  在页面加载时,有时会在页面中看到这个:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;message&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案:</strong> 使用v-cloak</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong>要在css代码部分写如下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样:就可以防止也页面闪烁</p>
<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p><strong>解决的问题:</strong>只渲染元素和组件一次，随后的渲染，使用了此指令的元素/组件及其所有的子节点，都会当作静态内容并跳过，这可以用于优化更新性能。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el: <span class="string">'#app'</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               message: <span class="string">'我是data中message的属性的值'</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当添加v-once的指令所对应的元素, 其数据发生改变时,并不会再一次进行渲染</p>
</blockquote>
<blockquote>
<p>v-cloak和v-once 不需要表达式, 直接将指令写在开始标签中即可</p>
</blockquote>
<p>## </p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>hexo搭建教程</title>
    <url>/hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<h1 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h1><ol>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>GitHub创建个人仓库</li>
<li>生成SSH添加到GitHub</li>
<li>将hexo部署到GitHub</li>
<li>设置个人域名</li>
</ol>
<h1 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h1><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a></p>
<p>windows：到git官网上下载,<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>
<p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install git</span><br></pre></td></tr></table></figure>

<p>安装好后，用<code>git --version</code> 来查看一下版本</p>
<h1 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h1><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>
<p>windows：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a>选择LTS版本就行了。</p>
<p>linux：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>

<p>安装完后，打开命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>检查一下有没有安装成功</p>
<p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p>
<h1 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h1><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p>
<p>输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>依旧用<code>hexo -v</code>查看一下版本</p>
<p>至此就全部安装完了。</p>
<p>接下来初始化一下hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure>

<p>这个myblog可以自己取什么名字都行，然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd myblog //进入这个myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹目录下有：</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li>** _config.yml: 博客的配置文件**</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p>
<p>大概长这样：<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="img"><br>使用ctrl+c可以把服务关掉。</p>
<h1 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h1><p>首先，你先要有一个GitHub账户，去注册一个吧。</p>
<p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcm7ej20ei0c1aah.jpg" alt="img"></p>
<p>创建一个和你用户名相同的仓库，<a href="http://xn--yfr16an19l.github.io/" target="_blank" rel="noopener">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://xn--xxxx-4m5f354ev5p.github.io/" target="_blank" rel="noopener">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstusrdj20iw0o4myp.jpg" alt="img"></p>
<h1 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h1><p>回到你的git bash中，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p>
<p>可以用以下两条，检查一下你有没有输对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>然后创建SSH,一路回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstd106j20kb073gll.jpg" alt="img"></p>
<p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>
<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstdifaj210s0gfjrz.jpg" alt="img"></p>
<p>在gitbash中，查看是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h1 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h1><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>
<p>注意deploy时可能要你输入username和password。</p>
<p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstbtvfj20lq01u3yd.jpg" alt="img"></p>
<h1 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h1><p>现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p>
<p>注册一个阿里云账户,在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5" target="_blank" rel="noopener">阿里云</a>上买一个域名，我买的是 <code>fangzh.top</code>，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p>
<p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p>
<p>点<strong>解析</strong>进去，添加解析。</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcu8xj20d607wdfw.jpg" alt="img"></p>
<p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址</p>
<p><strong>注意，解析线路选择默认</strong>，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择<strong>默认</strong>！！</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstf8unj20ob05b0sq.jpg" alt="img"></p>
<p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>fangzh.top</code></p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstghklj20as04mt8n.jpg" alt="img"></p>
<p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p>
<p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstgsyrj208806aq2z.jpg" alt="img"></p>
<p>最后，在gitbash中，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p>
<p>接下来你就可以正式开始写文章了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure>

<p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>就可以看到更新了。</p>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><p>hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流。</p>
<h1 id="1-hexo基本配置"><a href="#1-hexo基本配置" class="headerlink" title="1. hexo基本配置"></a>1. hexo基本配置</h1><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方的配置</a>描述。</p>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table>
<thead>
<tr>
<th align="left">参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">title</td>
<td>网站标题</td>
</tr>
<tr>
<td align="left">subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td align="left">description</td>
<td>网站描述</td>
</tr>
<tr>
<td align="left">author</td>
<td>您的名字</td>
</tr>
<tr>
<td align="left">language</td>
<td>网站使用的语言</td>
</tr>
<tr>
<td align="left">timezone</td>
<td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC</td>
</tr>
</tbody></table>
<p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p>
<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>url</code></td>
<td>网址</td>
</tr>
<tr>
<td><code>root</code></td>
<td>网站根目录</td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td>
</tr>
<tr>
<td><code>permalink_defaults</code></td>
<td>永久链接中各部分的默认值</td>
</tr>
</tbody></table>
<p>在这里，你需要把<code>url</code>改成你的网站域名。</p>
<p>permalink，也就是你生成某个文章时的那个链接格式。</p>
<p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p>
<p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td><code>:year/:month/:day/:title/</code></td>
<td>2013/07/14/hello-world</td>
</tr>
<tr>
<td><code>:year-:month-:day-:title.html</code></td>
<td>2013-07-14-hello-world.html</td>
</tr>
<tr>
<td>:category/:title</td>
<td>foo/bar/hello-world</td>
</tr>
</tbody></table>
<p>再往下翻，中间这些都默认就好了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: landscape</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br></pre></td></tr></table></figure>

<p><code>theme</code>就是选择什么主题，也就是在<code>theme</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了。</p>
<p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(<code>Repository</code>)的简写。<code>branch</code>选择仓库的哪个分支。这个在之前进行github page部署的时候已经修改过了，不再赘述。而这个在后面进行双平台部署的时候会再次用到。</p>
<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>layout</code></td>
<td>布局</td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
</tr>
<tr>
<td><code>comments</code></td>
<td>开启文章的评论功能</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
</tr>
</tbody></table>
<p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure>

<h3 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h3><p>当你每一次使用代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new paper</span><br></pre></td></tr></table></figure>

<p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p>
<p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>
<table>
<thead>
<tr>
<th>布局</th>
<th>路径</th>
</tr>
</thead>
<tbody><tr>
<td><code>post</code></td>
<td><code>source/_posts</code></td>
</tr>
<tr>
<td><code>page</code></td>
<td><code>source</code></td>
</tr>
<tr>
<td><code>draft</code></td>
<td><code>source/_drafts</code></td>
</tr>
</tbody></table>
<p>而new这个命令其实是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>只不过这个layout默认是post罢了</p>
<h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>如果你想另起一页，那么可以使用</p>
<p>hexo new page board</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page board</span><br></pre></td></tr></table></figure>

<p>系统会自动给你在source文件夹下创建一个board文件夹，<a href="http://xn--boardindex-zt2p02eqgs45dlht758bqmyd.md/" target="_blank" rel="noopener">以及board文件夹中的index.md</a>，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<h4 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new draft newpage</span><br></pre></td></tr></table></figure>

<p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<p>在本地端口中开启服务预览。</p>
<p>如果你的草稿文件写完了，想要发表到post中，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure>

<p>就会自动把newpage.md发送到post中。</p>
<p>转载自：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37781304/article/details/82729029</a> </p>
<p>作者：zjufangzh<br>来源：CSDN </p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>js的防抖节流</title>
    <url>/js%E7%9A%84%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h2 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><ol>
<li><p>定义 </p>
<p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时；典型的案例就是输入搜索：输入结束后n秒才进行搜索请求，n秒内又输入的内容，就重新计时 </p>
</li>
<li><p>实现原理</p>
<p>函数防抖的基本思想是设置一个定时器，在指定时间间隔内运行代码时清楚上一次的定时器，并设置另一个定时器，知道函数请求停止并超过时间间隔才会执行。</p>
</li>
<li><p>使用场景 </p>
<p>文本框输入搜索（连续输入时避免多次请求接口） 、window.onscroll事件、防止用户快速点击多次按钮</p>
</li>
<li><p>代码实现 </p>
<p>防止用户多次点击按钮，做到最后一次点击按钮1秒后再执行按钮的点击方法</p>
<p>在项目公共方法文件里写防抖函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span> <span class="comment">// 借助闭包</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(fn, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目中调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button type=&quot;danger&quot; @click=&quot;testDebounce&quot;&gt;</span><br><span class="line">    测试防抖</span><br><span class="line">  &lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; debounce &#125; from &apos;@u&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    testDebounce: debounce(() =&gt; &#123;</span><br><span class="line">      console.log(&apos;安排上了&apos;)</span><br><span class="line">    &#125;, 1000),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><ol>
<li><p>定义 </p>
<p>当一个事件持续触发时这个事件的函数只在n秒中执行一次</p>
</li>
<li><p>实现原理</p>
<p>借助<code>setTimeout</code>来做一个简单的实现，加上一个状态位<code>valid</code>来表示当前函数是否处于工作状态（不止这一种实现方式，使用时间戳的差值也可实现）</p>
</li>
<li><p>代码实现 </p>
<p>在项目公共方法文件里写节流函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">           <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            fn()</span><br><span class="line">            valid = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目中调用（调用和防抖函数一样）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button type=&quot;danger&quot; @click=&quot;testDebounce&quot;&gt;</span><br><span class="line">    测试防抖</span><br><span class="line">  &lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; throttle &#125; from &apos;@u&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    testDebounce: throttle(() =&gt; &#123;</span><br><span class="line">      console.log(&apos;安排上了&apos;)</span><br><span class="line">    &#125;, 1000),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>flex属性</title>
    <url>/flex%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h4 id="使用flex的特点"><a href="#使用flex的特点" class="headerlink" title="使用flex的特点"></a>使用flex的特点</h4><ol>
<li>必须给父容器设置 display:flex; 子容器才具备flex效果。</li>
<li>子容器显示的特性类似行 内块级元素。</li>
<li>子容器默认是一行显示 不会自动换行  子容器会根据自身的宽度做等比例缩放。</li>
<li>子容器的  flex:1属性<ol>
<li>平分剩余的宽度   把设置过flex数据的元素  flex属性值的和计算   也就是分出多少份</li>
<li>子容器的 flex的属性的值 就是当前容器所占的等份数</li>
</ol>
</li>
<li>默认的排列的方向是横向排列  其实也可以纵向排列</li>
</ol>
<p>display:flex是CSS3的新特性，可以轻松的实现多种常见布局，以下将演示双飞翼布局，两栏自适应布局，高度自适应布局的实现和使用display:flex代替繁琐的负margin值实现水平/垂直居中。</p>
<h4 id="实现元素水平-垂直居中"><a href="#实现元素水平-垂直居中" class="headerlink" title="实现元素水平/垂直居中"></a>实现元素水平/垂直居中</h4><p>css代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center; <span class="comment">/* 水平居中 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;     <span class="comment">/* 垂直居中 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span>section<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/flex属性/1562688880(1).jpg" alt="1562688880(1)"></p>
<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><p>两边固定宽度，中间自适应宽度</p>
<p>css代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.headers</span>&#123;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.headers</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">          <span class="attribute">background-color</span>: pink;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.headers</span> <span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">          <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: hotpink;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headers"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/flex属性/1562686716(1).jpg" alt="1562686716(1)"></p>
<h4 id="两栏自适应"><a href="#两栏自适应" class="headerlink" title="两栏自适应"></a>两栏自适应</h4><p>左边固定宽度，右边自适应宽度</p>
<p>css代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.left</span>&#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: pink;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span>&#123;</span><br><span class="line">          <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: hotpink;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/flex属性/1562687670(1).jpg" alt="1562687670(1)"></p>
<h4 id="高度自适应布局"><a href="#高度自适应布局" class="headerlink" title="高度自适应布局"></a>高度自适应布局</h4><p>头部固定高度，内容自适应</p>
<p>css代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    display: flex;</span><br><span class="line">    /*可以设置排列的方向  默认是横向  column纵向*/</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">header&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: #00CC00;</span><br><span class="line">&#125;</span><br><span class="line">section&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    /*height: 100%;*/</span><br><span class="line">    flex: 1;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span>section<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/flex属性/1562688416(1).jpg" alt="1562688416(1)"></p>
]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue生命周期</title>
    <url>/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>​        <strong>概念：</strong><br>​            当 vue 实例从 创建 — 运行 — 销毁，这其中经历的过程叫做生命周期。<br>​        <strong>流程：</strong><br>​            1.创建 vue 实例<br>​            2.初始化事件 和 生命周期<br>​            3.初始化 data 和 methods<br>​            4.创建虚拟 dom<br>​            5.使用 虚拟 dom 来替换 vue 实例中的 el 属性，解析语法<br>​            6.进入 mounted 状态： 如果 data 中的数据发生改变，会重新生成虚拟 dom, 并且解析语法，再次进入 mounted 状态<br>​            7.销毁 vue 实例（调用 $destroy 方法）<br>​        <strong>钩子函数：</strong><br>​            1.初始化 data 和 methods时执行<br>​                之前<br>​                    beforeCreate<br>​                之后<br>​                    created<br>​            2.使用 虚拟 dom 来替换 vue 实例中的 el 属性时执行<br>​                之前：<br>​                    beforeMount<br>​                之后<br>​                    mounted<br>​            3.data 中的数据发生改变时执行<br>​                之前：<br>​                    beforeUpdate<br>​                之后：<br>​                    updated<br>​            4.销毁 vue 实例时执行<br>​                之前：<br>​                    beforeDestroy<br>​                之后：<br>​                    destroye</p>
<h4 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#生命周期图示" target="_blank" rel="noopener">生命周期图示</a></h4><p><img src="/Vue生命周期/lifecycle.png" alt="lifecycle"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>重要</tag>
      </tags>
  </entry>
  <entry>
    <title>封装axios</title>
    <url>/%E5%B0%81%E8%A3%85axios/</url>
    <content><![CDATA[<h2 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h2><p>本项目是用Webpack-dev-server的proxy代理的请求</p>
<p>在utils文件夹新建axios.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 错误的统一函数</span></span><br><span class="line">  <span class="keyword">static</span> handleError = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; status, config &#125; = error</span><br><span class="line">    <span class="keyword">const</span> &#123; url, method, data, params &#125; = config</span><br><span class="line">    <span class="keyword">const</span> isAccept = (status + <span class="string">''</span>).substr(<span class="number">0</span>, <span class="number">1</span>) === <span class="string">'2'</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'来自请求的错误'</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(&#123; status, url, method, data, params &#125;))</span><br><span class="line">      <span class="built_in">console</span>.dir(<span class="built_in">JSON</span>.stringify(error))</span><br><span class="line">      <span class="built_in">console</span>.groupEnd()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> message = error.data.Message</span><br><span class="line">    <span class="comment">// 用element-ui的提示框提示错误</span></span><br><span class="line">    Message(&#123;</span><br><span class="line">      message: isAccept ? message : <span class="string">`Error: <span class="subst">$&#123;status&#125;</span> - <span class="subst">$&#123;message&#125;</span>`</span>,</span><br><span class="line">      type: <span class="string">'error'</span>,</span><br><span class="line">      customClass: <span class="string">'dz-top-message'</span>,</span><br><span class="line">      duration: <span class="number">4000</span>,</span><br><span class="line">      showClose: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 返回错误的参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="built_in">Object</span>.assign(error, &#123; isAccept &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成Name</span></span><br><span class="line">  <span class="keyword">static</span> getName(option) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; url, method &#125; = option</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;url&#125;</span>@<span class="subst">$&#123;method || <span class="string">'get'</span>&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 队列对象</span></span><br><span class="line">  queue = &#123;&#125;</span><br><span class="line">  setInterceptors(instance, options) &#123;</span><br><span class="line">    <span class="comment">// 请求前拦截（配置发送请求的信息）</span></span><br><span class="line">    instance.interceptors.request.use(</span><br><span class="line">      config =&gt; &#123;</span><br><span class="line">        <span class="comment">// 拼接本次请求的url</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> options.prefix === <span class="string">'string'</span>) &#123;</span><br><span class="line">          <span class="comment">// 判断请求惨数中有没有设置url前缀</span></span><br><span class="line">          config.url = <span class="string">'/api'</span> + options.prefix + config.url</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// /api/sys/DZSoft为本项目的默认请求url前缀</span></span><br><span class="line">          config.url = <span class="string">'/api/sys/DZSoft'</span> + config.url</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 给实例添加取消请求的方法</span></span><br><span class="line">        <span class="keyword">if</span> (!config.notInterrupt) &#123;</span><br><span class="line">          config.cancelToken = <span class="keyword">new</span> CancelToken(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">            instance.cancel = c</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">      &#125;,</span><br><span class="line">      error =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="comment">// 请求前遇见错误返回Promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 对返回的数据做统一拦截处理</span></span><br><span class="line">    instance.interceptors.response.use(</span><br><span class="line">      <span class="comment">// 请求成功</span></span><br><span class="line">      response =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; Code &#125; = response.data</span><br><span class="line">        <span class="comment">// 成功后删除queue队列里的实例</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.queue[RequestManager.getName(options)]</span><br><span class="line">        <span class="comment">// 和后端定义Code为1则为异常，调用handleError函数统一处理</span></span><br><span class="line">        <span class="keyword">if</span> (Code === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> RequestManager.handleError(response)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// todo 请求成功并完成后做些事情</span></span><br><span class="line">          <span class="keyword">return</span> response.data.Data</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 请求失败</span></span><br><span class="line">      error =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">          <span class="comment">// 调用handleError函数统一处理</span></span><br><span class="line">          <span class="keyword">return</span> RequestManager.handleError(error.response)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;)</span><br><span class="line">        <span class="comment">// return Promise.reject(error)</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  create() &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每次请求都会用URL个请求方式生成一个name</span></span><br><span class="line">      <span class="keyword">const</span> name = RequestManager.getName(options)</span><br><span class="line">      <span class="comment">// 用生成的name去queue队列里查看有没有相同的请求正在请求，有的话执行if代码</span></span><br><span class="line">      <span class="keyword">const</span> last = self.queue[name]</span><br><span class="line">      <span class="built_in">console</span>.dir(last, <span class="string">'last'</span>)</span><br><span class="line">      <span class="keyword">if</span> (last) &#123;</span><br><span class="line">        <span class="comment">// 如果这次请求方式为get或空（空再后面操作也会转成get）则执行if代码</span></span><br><span class="line">        <span class="keyword">if</span> (options.method === <span class="literal">undefined</span> || options.method === <span class="string">'get'</span>) &#123;</span><br><span class="line">          <span class="comment">// 判断上次请求有没有取消方法，有则取消上次请求</span></span><br><span class="line">          <span class="keyword">if</span> (last.cancel) &#123;</span><br><span class="line">            last.cancel()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">delete</span> self.queue[name]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!options.notInterrupt) &#123; <span class="comment">// 如果不是get请求，参数中notInterrupt为空或为false则终止本次请求</span></span><br><span class="line">          <span class="keyword">return</span> last</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建一个新的axios实例</span></span><br><span class="line">      <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        <span class="comment">// 允许axios带上cookie，默认为false,不带cookie</span></span><br><span class="line">        withCredentials: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 设置请求超时时间</span></span><br><span class="line">        timeout: <span class="number">5000</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 设置本次请求的拦截器</span></span><br><span class="line">      self.setInterceptors(instance, options)</span><br><span class="line">      <span class="comment">// 以name往queue队列里添加本次请求的实例</span></span><br><span class="line">      self.queue[name] = instance</span><br><span class="line">      <span class="keyword">return</span> instance(options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> RequestManager().create()</span><br></pre></td></tr></table></figure>

<p>再项目的stores的actions中调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入封装的axios</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@u/axios'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    DataList: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setDataList(state, DataList) &#123;</span><br><span class="line">      state.DataList = [...DataList]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="keyword">async</span> fetchDataList(&#123; commit &#125;, pageDatas) &#123;</span><br><span class="line">	  <span class="comment">// 调用request发送请求</span></span><br><span class="line">      <span class="keyword">const</span> list = (<span class="keyword">await</span> request(&#123;</span><br><span class="line">        url: <span class="string">'/CooperationRequest'</span>,</span><br><span class="line">        params: pageDatas</span><br><span class="line">      &#125;))</span><br><span class="line">      commit(<span class="string">'setDataList'</span>, list)</span><br><span class="line">      <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>axios</category>
      </categories>
  </entry>
  <entry>
    <title>浏览器输入一个址按回车之后发生了什么</title>
    <url>/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%9D%80%E6%8C%89%E5%9B%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="浏览器输入一个网址，按回车之后发生了什么"><a href="#浏览器输入一个网址，按回车之后发生了什么" class="headerlink" title="浏览器输入一个网址，按回车之后发生了什么"></a>浏览器输入一个网址，按回车之后发生了什么</h1><p>在浏览器输入网址并按下回车后的动作如下</p>
<ol>
<li><p>根据URL查找其对应的IP过程如下</p>
<ol>
<li>查找浏览器缓存的DNS信息，未找到则去互联网服务提供商的DNS服务器查找，还未找到则去顶级DNS服务器，还为找到则说明这个域名不存在或为注册。</li>
</ol>
</li>
<li><p>得到IP后则寻找相应服务器</p>
</li>
<li><p>与服务器进行TCP的三次握手,具体如下</p>
<ol>
<li><strong>第一次握手</strong>：客户端向服务器发送<strong>连接请求报文</strong>，此时客户端进入同步已发送状态</li>
<li><strong>第二次握手</strong>：服务器接受报文后回应<strong>确认报文</strong>，此时服务器进入同步收到状态</li>
<li><strong>第三次握手</strong>：客户端收到服务器回应的确认报文后再次向服务器发送<strong>确认报文</strong></li>
<li>当客户端和服务器都接受到确认报文后则进入ESTABLISHED状态（已连接状态）</li>
</ol>
</li>
<li><p>浏览器向服务器发送HTTP请求</p>
</li>
<li><p>服务器响应浏览器的HTTP请求</p>
</li>
<li><p>浏览器解析响应的资源</p>
</li>
<li><p>断开连接，进行TCP的四次挥手</p>
<ol>
<li><strong>客户端</strong>向服务器发送<strong>连接释放报文</strong></li>
<li><strong>服务器</strong>收到连接释放报文段后即发出<strong>确认报文</strong>，客户端收到回应的确认报文后就等待服务器的释放报文</li>
<li><strong>服务器</strong>没有需要向客户端发送的数据后就会向客户端发送<strong>释放报文</strong></li>
<li><strong>客户端</strong>收到服务器的释放报文报文后会向服务器发送<strong>确认报文</strong>，此时经过等待计时器设置的时间后断开连接</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>三次握手 四次挥手</tag>
      </tags>
  </entry>
  <entry>
    <title>前端路由</title>
    <url>/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>​    <strong>概念（vue）：</strong><br>​        当路径中的 hash 值改变时，要改变显示的内容<br>​    <strong>原理：</strong><br>​        利用URL上的hash，当hash改变不会引起页面刷新，所以可以利用 hash 值来做单页面应用的路由，并且当 url 的 hash 发生变化的时候，可以触发相应 hashchange 回调函数。   </p>
<h4 id="vue-中的路由插件：vue-routerue-router"><a href="#vue-中的路由插件：vue-routerue-router" class="headerlink" title="vue 中的路由插件：vue-routerue-router"></a>vue 中的路由插件：vue-routerue-router</h4><p>​        <strong>概念：</strong>是 vue 官方的 CLI （它是一个命令行工具）<br>​        <strong>作用：</strong>管理路由<br>​        <strong>安装：</strong><br>​            script<br>​            CDN<br>​            npm<br>​        <strong>使用：</strong><br>​            1） html<br>​                1.1 引入 vue &amp; vue-router<br>​                1.2 通过 router-link 设置请求路径<br>​                1.3 通过 router-view 来渲染组件<br>​            2） js<br>​                2.1 设置路由对应的组件<br>​                2.2 设置路由选项<br>​                2.3 创建 router 对象<br>​                2.4 挂载到 vue 实例中</p>
<h4 id="动态路由："><a href="#动态路由：" class="headerlink" title="动态路由："></a>动态路由：</h4><p>​            <strong>设置动态路由：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">'news'</span>, <span class="attr">path</span>: <span class="string">'/news/:id'</span>, <span class="attr">component</span>: news &#125;</span><br></pre></td></tr></table></figure>

<p>​           <strong>获取动态路由参数：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.params.id</span><br></pre></td></tr></table></figure>

<p>​            <strong>router-link 的 to 属性：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/index"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: '/index'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'index'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="redirect-重定向："><a href="#redirect-重定向：" class="headerlink" title="redirect 重定向："></a>redirect 重定向：</h4><p>​            <strong>作用：</strong>可以从一个路由跳转到另一个路由<br>​            <strong>应用：</strong><br>​                1）设置默认首页</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/index'</span> &#125;</span><br></pre></td></tr></table></figure>

<p>​                2）统一错误处理页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">                   &#123;<span class="attr">name</span>: <span class="string">'err'</span>, <span class="attr">path</span>: <span class="string">'/err'</span>, <span class="attr">component</span>: err&#125;,</span><br><span class="line">                   &#123; <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">redirect</span>: <span class="string">'/err'</span>&#125;</span><br><span class="line">               ]</span><br></pre></td></tr></table></figure>

<pre><code>**导航：**
           链接式导航
               作用：通过点击链接跳转到指定的路由中</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/index"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​                        编程式导航<br>​                            作用：通过 js 代码中转到指定的路由中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/index'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="redirect-导航守卫："><a href="#redirect-导航守卫：" class="headerlink" title="redirect 导航守卫："></a>redirect 导航守卫：</h4><pre><code>**全局前置守卫**</code></pre><p>​                    你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// to: Route: 即将要进入的目标 路由对象</span></span><br><span class="line">  <span class="comment">// from: Route: 当前导航正要离开的路由</span></span><br><span class="line">  <span class="comment">// next:  一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​            <strong>路由独享的守卫</strong></p>
<p>​                    你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​                    这些守卫与全局前置守卫的方法参数是一样的。</p>
<p>​            <strong>组件内的守卫</strong></p>
<p>​                最后，你可以在路由组件内直接定义以下路由导航守卫：</p>
<p>​                    beforeRouteEnter</p>
<p>​                    beforeRouteUpdate</p>
<p>​                    beforeRouteLeave</p>
<h4 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h4><ol>
<li>导航被触发。</li>
<li>在失活的组件里调用离开守卫。</li>
<li>调用全局的 <code>beforeEach</code> 守卫。</li>
<li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li>
<li>在路由配置里调用 <code>beforeEnter</code>。</li>
<li>解析异步路由组件。</li>
<li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li>
<li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li>
<li>导航被确认。</li>
<li>调用全局的 <code>afterEach</code> 钩子。</li>
<li>触发 DOM 更新。</li>
<li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li>
</ol>
<h4 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h4><pre><code>1. 默认情况下 vue-router 会给被点击过的 router-link 设置两个类名： router-link-exacte-active router-link-active
2. 可以通过给 router-link 设置 active-class 属性来改变自动生成的 router-link-active 类名
3. 可以通过给 router-link 设置 tag 属性来指定 router-link 生成的标签
    嵌套路由：
​            [
    { name: &apos;news&apos;, path: &apos;/news&apos;, component: news, children: [
    ​    { path: &apos;aaa&apos;, component: aaa }, // /news/aaa
    ​    { path: &apos;bbb&apos;, component: bbb }  // /news/bbb
    ] }
​            ]
​            // 将来要加载 /news/aaa 时，会
​            //  先将 news 在它的 router-view 中进行渲染，渲染完成以后
​            //  再将 aaa 渲染到 news 组件中的 router-view 中</code></pre>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>清除浮动</title>
    <url>/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="常用的两种清除浮动的方式"><a href="#常用的两种清除浮动的方式" class="headerlink" title="常用的两种清除浮动的方式"></a>常用的两种清除浮动的方式</h2><p> after伪元素清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;<span class="comment">/*伪元素是行内元素 正常浏览器清除浮动方法*/</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">clear</span>:both;</span><br><span class="line">        <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">        *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>before和after双伪元素清除浮动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.clearfix:after,.clearfix:before&#123;</span><br><span class="line">       content: &quot;&quot;;</span><br><span class="line">       display: table;</span><br><span class="line">   &#125;</span><br><span class="line">   .clearfix:after&#123;</span><br><span class="line">       clear: both;</span><br><span class="line">   &#125;</span><br><span class="line">   .clearfix&#123;</span><br><span class="line">       *zoom: 1;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>js高级知识点整理</title>
    <url>/js%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="04-JavaScript高级"><a href="#04-JavaScript高级" class="headerlink" title="04-JavaScript高级"></a>04-JavaScript高级</h2><h4 id="1-原型对象"><a href="#1-原型对象" class="headerlink" title="1.原型对象"></a>1.原型对象</h4><p>​    1.1. 学习原因 </p>
<p>​        1.1.1. 之前的构造函数在 每创建一次对象的就会添加一次方 </p>
<p>​                法，而方法是一样的，这样就 会造成内存的浪费。 </p>
<p>​            1.2. 构造函数和原型的关系 </p>
<p>​                1.2.1. - 构造函数可以通过prototype找到原型 - 原型可以通过 </p>
<p>​                constructor找到构造函数 </p>
<p>​            1.3. 获取对象原型的方式并接收 </p>
<p>​                1.3.1. var n = 构造函数名.prototype </p>
<p>​            1.4. 给接收的原型里添加方法 </p>
<p>​                1.4.1. n.方法名 = function（）｛函数体｝ </p>
<p>​            1.5. 给原型里添加方法 </p>
<p>​                1.5.1. 构造函数名.prototype.方法名 = function( ){ 函数体｝ </p>
<p>​            1.6. 实例对象和原型对象的关系（原型链） </p>
<p>​                1.6.1. 实例对象在调用一个方法时的执行顺序 </p>
<p>​                    ①先在自身查找。</p>
<p>​                    ②诺自身没有则会通过<strong>proto</strong>找到原型，去原型中去找 </p>
<p>​                    ③诺原型中没则会通过<strong>proto</strong>找到原型中的原型，去查找</p>
<pre><code>④诺还没有则会再去上一级查找直到老祖宗原型，诺还没有就null  </code></pre><h5 id="2-继承（js没有继承）"><a href="#2-继承（js没有继承）" class="headerlink" title="2. 继承（js没有继承）"></a>2. 继承（js没有继承）</h5><p>​            2.1. 继承作用介绍 </p>
<p>​                2.1.1. 子对象继承父对象的属性或方法（减少代码冗余）2.2. 原型继承 </p>
<p>​                2.2.1. 原理 </p>
<p>​                    2.2.1.1. 更改子类原型的指向（给子类原型重新赋值） </p>
<p>​                2.2.2. 代码 </p>
<p>​                    2.2.2.1. //创建fn1 function fn1（）｛name：‘名字’｝ //给fn1原型里添加方法 </p>
<p>​                            fn1.prototype,方法名 = function（）｛函数体｝ //创建对象fn1对象 var p1 = new fn1（） //创建fn2  </p>
<p>​                            function fn2（）｛｝ //吧p1对象附给fn2的原型 </p>
<p>​                2.2.3. 优缺点 </p>
<p>​                    2.2.3.1. 缺点：属性无法传递 </p>
<p>​                    2.2.3.2. 优点：方法可以传递 </p>
<p>​            2.3. 借用继承 </p>
<p>​                2.3.1. 原理 </p>
<p>​                    2.3.1.1. call方法改变this的指向</p>
<p>​                2.3.2. 实现 </p>
<p>​                    2.3.2.1. 在子类构造函数中借用父类构造函数，并且在call中传入子类对象 </p>
<p>​                2.3.4. 优缺点2.3.4.1. 优点：属性可以借用 </p>
<p>​                    2.3.4.2. 缺点;方法不可以借用 </p>
<p>​            2.4. 原型+借用组合继承 </p>
<p>​                2.4.1. 缺点 </p>
<p>​                    2.4.1.1. 给其中一个实例对象添加方法其它的对象都可以使用 （添加到原型） </p>
<p>​                2.4.2. 解决 </p>
<p>​                    2.4.2.1. 让对象的原型不要指向同一个（借用 + 拷贝继承） </p>
<p>​            2.5. 拷贝 </p>
<p>​                2.5.1. 原理 </p>
<p>​                    2.5.1.1. 对象B 拷贝 对象A中的属性和方法（把对象A中属性和方法复制一份新的给对象B）（利用for in循环） </p>
<p>​                2.5.2. 代码 </p>
<p>​                    2.5.2.1. for (var key in 父对象)｛ //循环一个父对象的方法就 判断子对象有没有此方法， if（子对象[yey]==undefined）｛ //没有的话赋给子对象 子对象[key] = 父对象[key] ｝ ｝ 可 以用函数封装起来两个父子对象设成参数，实现多次调用 </p>
<p>​            2.6. 借用+拷贝 </p>
<p>​                2.6.1. 拷贝：拷贝方法 借用：借用属性 </p>
<h5 id="3-this指向的不同情况"><a href="#3-this指向的不同情况" class="headerlink" title="3.this指向的不同情况"></a>3.this指向的不同情况</h5><p>​            3.1. 普通函数中this的指向 window; </p>
<p>​            3.2. 构造函数中的this指向当前所创建的对象3.3. 定时器中this的指向</p>
<p>​            3.3.定时器中的this指向window </p>
<p>​            3.4. 对象方法中的this指向 指向调用者</p>
<p>​            3.5. 事件处理程序中的this指向 事件源 </p>
<h5 id="4-改变函数内部this的指向"><a href="#4-改变函数内部this的指向" class="headerlink" title="4.改变函数内部this的指向"></a>4.改变函数内部this的指向</h5><p>​            4.1. call方法 </p>
<p>​                4.1.1. 语法：函数名.call(调用者,参数1…) </p>
<p>​            4.2. apply方法 </p>
<p>​                4.2.1. 语法：函数名.apply(调用者,[参数1…]) </p>
<p>​            4.3. bind方法 </p>
<p>​                4.3.1. 语法：函数名.bind(调用者,参数1…); </p>
<ol start="5">
<li><h5 id="函数的其他成员"><a href="#函数的其他成员" class="headerlink" title="函数的其他成员"></a>函数的其他成员</h5><p>​    5.1. arguments获取用户传入的实参 </p>
<p>​    5.2. length获取函数形参的个数</p>
<p>​    5.3. name函数的名字</p>
</li>
<li><h5 id="函数作为参数和返回值"><a href="#函数作为参数和返回值" class="headerlink" title="函数作为参数和返回值"></a>函数作为参数和返回值</h5><p>​    6.1. 函数作为函数的参数（回调函数） </p>
<p>​        6.1.1. 本质 还是实参和形参的关系。 只不过实参是一个匿名函数而已。 而将来形参接收了匿名函数。 </p>
<p>​        6.1.2. 解释 </p>
<p>​        6.1.2.1. 当调用一个函数A时，需要向函数A内部传入一段程序 时，可以选择将一个函数B当做实参传递给另一个函数A的形 参，并在另一个函数中执行。 </p>
<p>​        6.1.3. 案例：模拟动画完成后 </p>
<p>​    6.2. 函数作为函数的返回值 </p>
<p>​        6.2.1. 本质 </p>
<p>​            6.2.1.1. 就是使用return关键字，将内部的函数返回。 </p>
<p>​        6.2.2. 解释 </p>
<p>​            6.2.2.1. 在程序中，有时，在调用一个函数时，需要返回一个 新的函数来实现功能。比如之前学习的bind方法调用完后返 回一个新的函数。6.2.3. 案例 </p>
<p>​            6.2.3.1. 写一个函数实现返回可以检测任意类型的函数 </p>
</li>
</ol>
<h5 id="7-闭包"><a href="#7-闭包" class="headerlink" title="7. 闭包"></a>7. 闭包</h5><p>​            7.1. 用途 </p>
<p>​                7.1.1. - 可以在函数外部读取函数内部成员 - 让函数内成员始终 存活在内存中(延长局部变量的生命周期)                         朝阳群众卧底在函数别墅里抓小三给外面操作 </p>
<h5 id="8-递归"><a href="#8-递归" class="headerlink" title="8. 递归"></a>8. 递归</h5><p>​            8.1. 什么是递归 </p>
<p>​                8.1.1. 程序调用自身的编程技巧称为递归（在函数内部调用自己 的技巧） </p>
<p>​            8.2. 递归的三个阶段 </p>
<p>​                8.2.1. - 递归前进段 - 递归边界条件 - 递归返回段 </p>
<p>​            8.3. 递归的优点 </p>
<p>​                8.3.1. 减少代码量。 </p>
<p>​            8.4. 递归的缺点 </p>
<p>​                8.4.1. 若递归的层数较多时，会消耗cpu,浪费内存，影响性能。存，影响性能。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>js深拷贝和浅拷贝</title>
    <url>/js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p>深拷贝和浅拷贝</p>
<p>Object.assign()可实现浅拷贝及一层的深拷贝</p>
<ol>
<li><p>浅拷贝和深拷贝都只针对于引用数据类型</p>
</li>
<li><p>浅拷贝只能拷贝父对象的一层，拷贝后更深层的复杂数据属性还是指向同一个内存</p>
</li>
<li><p>深拷贝拷贝时判断属性是不是复杂数据类型，是则利用递归调用只身进行更深层次的拷贝</p>
<h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">parentObj, childObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> parentObj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (childObj[key] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 没有</span></span><br><span class="line">      childObj[key] = parentObj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wjl = &#123;</span><br><span class="line">    name: <span class="string">'王键麟'</span>,</span><br><span class="line">    money: <span class="number">1000000</span>,</span><br><span class="line">    cars: [<span class="string">'奔驰'</span>, <span class="string">'时风'</span>, <span class="string">'QQ'</span>],</span><br><span class="line">    dog: &#123; <span class="attr">name</span>: <span class="string">'阿黄'</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'红色'</span>, <span class="attr">type</span>: <span class="string">'狼青'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wsc = &#123;</span><br><span class="line">    name: <span class="string">'王思葱'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">copy(wjl, wsc)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝之后wsc的money更改之后wjl的money不会改变，但是更改cars或者是dog时wjl的也会跟着改变</span></span><br><span class="line">wsc.money = <span class="number">100</span></span><br><span class="line">wsc.cars[<span class="number">0</span>] = <span class="string">'拖拉机'</span></span><br><span class="line">wsc.dog.age = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(wjl.money)  <span class="comment">// 1000000 </span></span><br><span class="line"><span class="built_in">console</span>.log(wjl.cars)  <span class="comment">// ['拖拉机', '时风', 'QQ']  已被改变</span></span><br><span class="line"><span class="built_in">console</span>.log(wjl.dog.age)  <span class="comment">// 3  已被改变</span></span><br></pre></td></tr></table></figure>

<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">parentObj, childObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> parentObj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (childObj[key] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果父对象的属性是Array复杂类型则给子对象创建一个空数组（开辟一个新内存）并再次调用自身</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> parentObj[key] === <span class="string">'Array'</span>) &#123;</span><br><span class="line">        childObj[key] = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="comment">// 第二层拷贝</span></span><br><span class="line">        deepCopy(parentObj[key], childObj[key]);</span><br><span class="line">       <span class="comment">// 如果父对象的属性是Object则同上</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> parentObj[key] === <span class="string">'Object'</span>) &#123;</span><br><span class="line">        childObj[key] = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        <span class="comment">// 第二层拷贝</span></span><br><span class="line">        deepCopy(parentObj[key], childObj[key]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 属性为基本数据类型则直接赋值</span></span><br><span class="line">        childObj[key] = parentObj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wjl = &#123;</span><br><span class="line">    name: <span class="string">'王键麟'</span>,</span><br><span class="line">    money: <span class="number">1000000</span>,</span><br><span class="line">    cars: [<span class="string">'奔驰'</span>, <span class="string">'时风'</span>, <span class="string">'QQ'</span>],</span><br><span class="line">    dog: &#123; <span class="attr">name</span>: <span class="string">'阿黄'</span>, <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'红色'</span>, <span class="attr">type</span>: <span class="string">'狼青'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wsc = &#123;</span><br><span class="line">    name: <span class="string">'王思葱'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deepCopy(wjl, wsc)</span><br><span class="line"></span><br><span class="line">wsc.money = <span class="number">100</span></span><br><span class="line">wsc.cars[<span class="number">0</span>] = <span class="string">'拖拉机'</span></span><br><span class="line">wsc.dog.age = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(wjl.money)  <span class="comment">// 1000000 </span></span><br><span class="line"><span class="built_in">console</span>.log(wjl.cars)  <span class="comment">// ['奔驰', '时风', 'QQ']  没被改变</span></span><br><span class="line"><span class="built_in">console</span>.log(wjl.dog.age)  <span class="comment">// 2  没被改变</span></span><br></pre></td></tr></table></figure>

<p>这时深拷贝已经完成了，但是如果父对象的一个属性是互相应用的话就会造成死循环，下面是对此进行优化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">parentObj, childObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> parentObj) &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = parentObj[key]</span><br><span class="line">    <span class="comment">// 避免父对象和自身属性相互引用造成死循环，如obj1.a=obj1</span></span><br><span class="line">    <span class="keyword">if</span> (parent === parentObj) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (childObj[key] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果父对象的属性是Array复杂类型则给子对象创建一个空数组（开辟一个新内存）并再次调用自身</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> parentObj[key] === <span class="string">'Array'</span>) &#123;</span><br><span class="line">        childObj[key] = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="comment">// 第二层拷贝</span></span><br><span class="line">        deepCopy(parentObj[key], childObj[key]);</span><br><span class="line">       <span class="comment">// 如果父对象的属性是Object则同上</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> parentObj[key] === <span class="string">'Object'</span>) &#123;</span><br><span class="line">        childObj[key] = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        <span class="comment">// 第二层拷贝</span></span><br><span class="line">        deepCopy(parentObj[key], childObj[key]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 属性为基本数据类型则直接赋值</span></span><br><span class="line">        childObj[key] = parentObj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
</search>
